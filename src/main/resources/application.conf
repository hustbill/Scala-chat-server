akka {
//  stdout-loglevel = off
//  loglevel = off
  log-dead-letters = off
  log-dead-letters-during-shutdown = off
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = INFO
  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
  }

  persistence {
    journal {
//      plugin = "kafka-journal"
      max-message-batch-size = 1
      max-deletion-batch-size = 1
    }
    snapshot-store {
//      plugin = "kafka-snapshot-store"
    }
  }
}

akka-chat {
  http-service {
    interface = "0.0.0.0"
    port = 8080
  }

  sse-service {
    interface = "0.0.0.0"
    port = 9000
  }
}

with-cluster {
  akka {

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      lifecycle = off
      unhandled = on
    }
  }

  cluster {
    auto-down-unreachable-after = 3s
    seed-nodes  = ["akka.tcp://akka-chat-cluster@127.0.0.1:2551",
                   "akka.tcp://akka-chat-cluster@127.0.0.1:2552",
                   "akka.tcp://akka-chat-cluster@127.0.0.1:2553",
                   "akka.tcp://akka-chat-cluster@127.0.0.1:2554",
                   "akka.tcp://akka-chat-cluster@127.0.0.1:2555"]
    role {
      chatService.min-nr-of-members = 1
      chatMsgPublisher.min-nr-of-members = 1
      broadcastManager.min-nr-of-members = 1
      participantAdmin.min-nr-of-members = 1
      httpChatService.min-nr-of-members = 1
    }
  }

  remote {
    enabled-transports          = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = error

    netty.tcp {
      hostname = "127.0.0.1"
      port     = 2551
    }
  }

  }
}

with-remote {
  akka {
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }
    remote {
      transport = "akka.remote.netty.NettyRemoteTransport"
//      log-sent-messages = off
//      log-received-messages = off
      enabled-transports = ["akka.remote.netty.tcp"]
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
      }
    }
  }
}
